/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * reverse ( ListNode * head ){
        if(head==NULL || head->next==NULL) return head;
        ListNode * h2= reverse(head->next);
        head->next->next= head;
        head->next= NULL;
        return h2;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL) return true;
        ListNode * slow = head, * fast =head->next;
        while( fast && fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode * h2= slow->next;
        slow->next= NULL;
        h2=reverse(h2);
        while(head && h2){
            if(head->val != h2->val) return false;
            head=head->next;
            h2=h2->next;
        }
        return true;
    }
};
